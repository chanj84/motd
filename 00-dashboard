#!/usr/bin/env python3

import subprocess

services = ['sshd', 'smbd', 'docker']
services_columns = 5
bar_length = 25
usage_critical = 90

default = f'\033[0m'
bold = f'\033[1m'
black = f'\033[1;38;5;235m'
grey = f'\033[1;38;5;240m'
green = f'\033[1;38;5;2m'
red = f'\033[1;38;5;160m'
blue = f'\033[1;38;5;39m'

header = bold
subheader = grey


def print_format(header, content):
    print(f'  {subheader}{header:8}{default} : {content}')

def draw_bar(used):
    color = green if used < usage_critical else red
    bar_length_used = int((used * bar_length) / 100)

    bar = f'['
    bar += f'{color}={default}' * bar_length_used
    bar += f'{black}={default}' * (bar_length - bar_length_used)
    bar += f']'

    return bar

def run(command):
    return subprocess.run(command, shell=True, text=True, stdout=subprocess.PIPE).stdout.splitlines()

def _uptime():
    uptime = int(run(f'cut -d "." "/proc/uptime" -f 1')[0])
    seconds = int(uptime % 60)
    minutes = int(uptime / 60 % 60)
    hours = int(uptime / 60 / 60 % 24)
    days = int(uptime / 60 / 60 / 24)
    return f'{days}d {hours}h {minutes}m'

def _distribution():
    return run(f'lsb_release -ds')[0].strip()

def _kernel():
    return run(f'uname -rs')[0].strip()

def _hostname():
    return run(f'hostname')[0].strip()

def _cpu():
    cpu = run(f'lscpu | grep -i "name"')[0].split(':')[1].strip()
    cpu_num = run(f'lscpu | grep -i "^cpu(s)"')[0].split(':')[1].strip()
    return f'{cpu} ({subheader}cpus{default}: {cpu_num})'

def _memory():
    results = run(f'free -h | grep -i "mem"')[0].split()
    total = results[1]
    used = results[2]
    free = results[3]
    available = results[6]
    return f'{subheader}t{default}:{total:5} {subheader}u{default}:{used:5} {subheader}f{default}:{free:5} {subheader}a{default}:{available:5}'

def _swap():
    results = run(f'free -h | grep -i "swap"')[0].split()
    total = results[1]
    used = results[2]
    free = results[3]
    return f'{subheader}t{default}:{total:5} {subheader}u{default}:{used:5} {subheader}f{default}:{free:5}'

def _filesystems(fstype):
    command = f'df -h -t {fstype} --output=target,size,used,pcent | tail -n +2 | sort'
    mounts = run(command)

    for mount in mounts:
        path, size, used, percent = mount.split()

        usage = float(percent.strip('%'))
        color = default if usage < usage_critical else red
        bar = draw_bar(usage)

        print(f'  {bar} {subheader}t{default}:{size:5} {subheader}u{default}:{color}{used:5}{default} {color}{percent:>3}{default} {path}')

def _services():
    output = f''
    i = 0
    for service in services:
        status = run(f'systemctl is-active {service}')[0]

        color = green if status == 'active' else red

        output += f'  {color}â€¢{default} {service:8}'

        i += 1
        if i % services_columns == 0:
            output += f'\n'

    print(f'{output}')


distribution = _distribution()
kernel = _kernel()

print(f'{header}{distribution} {kernel}{default}')
print_format('hostname', _hostname())
print_format('uptime', _uptime())
print_format('cpu', _cpu())
print_format('memory', _memory())
print_format('swap', _swap())
print(f'')

print(f'{header}File Systems{default}:')
_filesystems('ext4')
_filesystems('cifs')
print(f'')

print(f'{header}Services{default}:')
_services()
print(f'')
